# -*- ispell-local-dictionary: "portugues"; org-export-headline-levels: 5; -*-
#+PROPERTY: header-args:js  :exports code
#+PROPERTY: header-args:elm  :exports code

# Revisão de Literatura --------------------------------------------------------

Um programa de computador é expresso por um conjunto de sentenças em alguma
linguagem de programação.[fn:statement]
A forma como as sentenças de uma linguagem são executadas pelo computador é
definida por um /modelo de computação/ cite:roy2004.

O código fonte de um programa consiste de uma série de instruções que expressam
uma sequência de comandos a se seguir durante a execução — esse período é
conhecido como /tempo de execução/, do inglês /runtime/.
Tradicionalmente, as sentenças de uma linguagem de programação denotam essa
sequência de forma explícita.
Tais linguagens são baseadas no modelo /imperativo/ de computação, e são
denominadas /linguagens imperativas/.

* Linguagens de Programação
  <<sec:langs>>

  Linguagens de programação são mais simples que linguagens naturais, no
  entanto, elas ainda podem conter uma sintaxe surpreendentemente rica, um
  conjunto de abstrações, e bibliotecas auxiliares.
  Esse é essencialmente o caso de linguagens usadas para resolver problemas
  reais do dia-a-dia.
  \textcite{roy2004} as chamam de linguagens /práticas/, que são “\textelp{}
  como a caixa de ferramentas de um mecânico experiente: há várias ferramentas
  diferentes para finalidades diferentes e todas estão lá por uma razão.” (p.
  33; tradução nossa).

  Todas as linguagens de programação possuem elementos primitivos para a
  descrição de dados e das transformações, ou processos, aplicados à eles —
  como a adição de dois números ou a seleção de um item de uma coleção.
  Essas primitivas são definidas por regras de sintaxe — a gramática — e pela
  semântica — o significado.

  # dados
  # processos
  # -> sintaxe
  # -> semântica
  Linguagens imperativas geralmente oferecem comandos para lidar com estado em
  tempo de execução, como declaração e atribuição de variáveis, e comandos
  para controlar o caminho que o programa deve seguir, como os que decidem a
  ordem de execução das sentenças — na literatura essa ordem é chamada de
  /fluxo de controle/ de um programa.

  # -> estado
  Durante sua execução o programa segue um caminho de acordo com seu /estado/
  interno — ou /memória/, o que um programa se lembra enquanto está ‘rodando’.
  Programas com estado interno, ou /statefull/ em inglês, são projetados para
  lembrar de eventos anteriores ou de interações com o usuário.
  A informação recordada é denominada o estado do programa cite:rouse2005.


* Footnotes

[fn:statement]
Uma sentença (/statement/) pode conter uma ou várias expressões ou instruções.
Uma única instrução numa linguagem de alto nível pode representar múltiplas
instruções de máquinas.
Programas consistem de instruções e expressões.
Uma expressão é um grupo de símbolos que representa um valor.
