# -*- ispell-local-dictionary: "pt_BR"; org-export-headline-levels: 5; -*-
#+PROPERTY: header-args:js  :exports code

# header-args is needed to use src_js{} for inline source code

* Dimensões de Avaliação
  \todo[inline]{“Dimensions of evaluation” em inglês, talvez “dimensões de análise” ou “de verificação” seja melhor?}

  As dimensões utilizadas neste trabalho são baseadas nas DCs de
  textcite:green1989. Assim usamos critérios estabelecidos, o que facilita a
  comparação de nossos resultados com trabalhos baseados nas DCs. O /framework/
  completo possui 14 dimensões, mas os autores recomendam usar um subconjunto
  apropriado para o artefato em mãos.

  # Traduzidas diretamente de KISS 2014
  - Nível de abstração :: /Disponibilidade e tipos de mecanismos de abstração/

       O sistema fornece alguma forma de definir novos termos com a notação pra
       que eles possam ser extendidos afim de descrever ideias claramente? Os
       detalhes podem ser encapsulados? O sistema insiste em definir novos
       termos? Qual o número de novos conceitos de alto nível devem ser
       aprendidos pra se fazer uso do sistema? Eles são fáceis de aprender e
       usar?

       Cada novo conceito é um empecilho pra aprendizagem e aceitação, mas
    também pode tornar um código complexo mais compreensível. Por exemplo, o
    React emprega o /fluxo de dados de mão única/ --- do inglês /one-way data
    flow/ ou /one-way binding/ --- em sua arquitetura. É necessário aprender
    conceitos novos para usar os componentes do React de forma adequada. Não
    compensa para aplicações pequenas, mas para aplicações complexas pode tornar
    o código mais compreensível e passível de manutenção porque os detalhes
    podem ser encapsulados em novos termos: os componentes.
    # maintainable: passível de manutenção, sustentável

    Outro exemplo é a função:

    #+begin_export latex
    \begin{citacao}
      A function has a name and, optionally, parameters as well as a body that
      returns a value following certain computational steps. A client can simply
      refer to a function by its name without knowing its implementation details.
      Accordingly, a function abstracts the computational process involved in the
      computation of a value. The learning barrier to the principle of a function is
      not great but it can still make a lot of code much more understandable 3 by
      hiding unimportant details.
      \cite[p.~13]{kiss2014}
    \end{citacao}
    #+end_export

  - Proximidade de descrição :: \todo{Traduzido de “Closeness of mapping”, poderia ser “Proximidade de mapeamento”} /Semelhança entre representação e o domínio/

       O quão relacionado é a notação com o resultado que ela descreve, ou
       melhor, o domínio do problema? Que partes parecem ser uma forma
       particularmente estranha de descrever algo?

       #+begin_export latex
       \begin{citacao}
         Um exemplo é a definição de layout de uma interface gráfica. Linguagens que
         não fornecem uma forma de descrever o layout de modo aninhado, ou seja,
         hierárquico, e como tal força o programador a “linearizar” o código com o uso
         desnecessário de variáveis intermediárias, dificultando enchergar como a
         estrutura de definição do layout corresponde com o layout final da aplicação.
         Não é atoa que especificações baseadas no XML são amplamente usadas na
         construção de interfaces gráficas em linguagens sem suporte nativo para
         representação hierárquica de layout.
         \cite[p.~13; tradução nossa]{kiss2014}
       \end{citacao}
       #+end_export

  - Dependências ocultas :: /Vínculos importantes implícitos entre entidades/

       As dependências entre as entidades da notação são visíveis ou ocultas?
       Todas as dependências são especificadas em ambas as direções? Alterações
       locais podem ter efeitos globais confusos?

       Se uma entidade cita outra, que por sua vez cita uma terceira, a
       alteração do valor da terceira entidade pode desencadear efeitos
       inesperados. O principal problema não é o fato de A depender de B, mas sim
       que a dependência não é explicitamente visível. Um caso bem conhecido de dependência
       oculta é o “problema da classe base frágil”[fn:fragile_base_class].

       # https://medium.com/ui-lab-school/guia-para-dimensoes-cognitivas-no-design-72d898a62bc7

       #+begin_export latex
       \begin{citacao}
         In (complex) class hierarchies a seemingly safe modification to a base class
         may cause derived classes to malfunction. The IDE in general cannot help
         discovering such problems and only certain programming language features can
         help preventing them. Another example are non-local side-effects in
         procedures, i.e. the dependencies of a procedure with non-local side-effects
         are not visible in its signature.
         \cite[pg.~14]{kiss2014}
       \end{citacao}
       #+end_export

  - Propensão a erros :: /Notação incita erros/

       Até que ponto a notação influência o programador a cometer um erro? Fazer
       algumas coisas parece ser particularmente complexo ou difícil, p. ex.,
       juntar várias coisas?
       # TODO: Melhorar, pois Berndt perguntou “o que são essas coisas?”

       Em muitas linguagens dinâmicas com definições implícitas de
       variáveis[fn:var_implicit_def], um erro de tipagem em uma variável pode
       de repente causar erros difíceis de encontrar já que o IDE nem sempre
       pode apontar tal erro devido a dinamicidade na linguagem. A inicialização
       implícita de variáveis com valor =null= pode levar a uma exceção de
       ponteiro nulo se o programador esquecer de inicializar as variáveis
       corretamente antes de usá-las.

  - Difusão         :: \todo{Diffuseness/terseness: difusão/concisão, ou dispersão} /Verbosidade da linguagem/
       # Diffuseness/terseness: difusão/concisão, ou dispersão
       Quantos símbolos ou quanto espaço a notação requer pra produzir um certo
       resultado ou expressar uma ideia. Que tipos de coisas ocupam mais espaço
       para se descrever?

       #+begin_export latex
       \begin{citacao}
         Some notations can be annoyingly long-winded, or occupy too much valuable
         “real-estate” within a display area. In Java before version 8 in order to
         express what are lambdas today anonymous classes were employed. Compared to
         Java 8’s lambdas these anonymous classes used to be a very verbose way of
         encoding anonymous functions especially when used in a callback-heavy setting
         like traditional GUI programming~\cite[p.~14]{kiss2014}.
         \todo[inline]{Pensar num exemplo mais próximo da Web e substituir citação direta.}
       \end{citacao}
       #+end_export

       # TODO: Comentar que concisão a custo de intenção explícita prejudica
       # legibilidade.

  - Viscosidade     :: /Resistência a mudanças/

       Existe alguma barreira contra mudança na notação? Quanto esforço é
       necessário pra fazer uma alteração num programa expresso na notação?

       Num sistema viscoso o usuário precisa realizar várias passos para
       concluir uma tarefa. Alterar o tipo de retorno de uma função pode causar
       erros em várias partes do código onde a função é chamada. Nesses casos um
       IDE pode ajudar muito.


  Outras dimensões que ficaram de fora são:

  - Comprometimento prematuro: /limitações na ordem de fazer as coisas/
  - Expressividade: /o propósito de uma entidade pode ser rapidamente determinado/
  - Consistência: /semânticas parecidas são apresentadas em estilo sintático
    parecido/
  - Operações mentais difíceis: /alto esforço cognitivo pra realizar tarefas/
  - Notação secundária: /informações extras por meio de notações além das
    formais/


  Em outras situações, e dependendo dos artefatos de informação, essas dimensões
  poderiam ser úteis. Se tivéssemos focado mais nas ferramentas e no processo de
  construção dos estudos de caso então as seguintes dimensões poderiam ser usadas:

  # progressive evaluation: análise/verificação
  # provisionality: momentaneidade, transitoriedade, provisoriedade
  - Visibilidade: /habilidade de ver os componentes claramente/
  - Análise progressiva: /trabalho realizado pode ser verificado em qualquer
    momento/
  - Provisoriedade\todo{'momentaneidade' ou 'transitoriedade'}: /grau
    de comprometimento com uma ação ou marco/


* *Revisão do JavaScript
  # TODO: Berndt disse p/ colocar como apêndice

  Talvez devêssemos colocar uma seção de revisão das ferramentas utilizadas na
  implementação dos estudos de caso? Poderíamos descrever os recursos relevantes
  para nossa análise.
  \todo[noline]{Berndt disse p/ colocar como apêndice}


* Processamento de Listas

  Uma coleção é um agrupamento com uma quantidade variável de itens, que (1)
  compartilham algum significado ao problema a se resolver e (2) precisam ser
  manipulados juntos de forma controlada.

  O único tipo de coleção no JavaScript é o arranjo, ou /array/, que pode ser
  construído através do objeto[fn:prototypes] global src_js{Array}, ou da
  notação de arranjos literais com colchetes:

  # TODO: find a way to insert a '\legend{}' before '\end{listing}' for the
  # reference. Take a look at function org-latex-src-block in ox-latex.
  #+caption: Criando coleções
  #+begin_src js
  var collection1 = new Array();
  var collection2 = [];
  #+end_src

  Uma tarefa muito comum na programação é a iteração[fn:iteration] de coleções.
  Um mecanismo muito utilizado para tal é o comando src_js{for}. Em
  \ref{code:forLoopTraverse} é demonstrado o uso do comando src_js{for} para
  percorrer os itens da coleção src_js{people} e mostrar cada um no console de
  depuração.

  #+caption: Percorrendo uma coleção com o laço src_js{for}
  #+label: code:forLoopTraverse
  #+BEGIN_SRC js
  var people = ["Alan Turing", "Alonzo Church", "Kurt Gödel"];
  var count  = 0;

  for (count = 0; count < people.length; count++) {
    console.log(people[count]);
  }
  #+END_SRC

** Formatação de preços

   Nesta seção veremos como formatar uma lista preços para serem mostrados na
   tela, p. ex., transformando um valor numérico src_js{50.45} em uma /string/
   src_js{"R$ 50.45"}. Para isso usamos uma função de formatação que é aplicada
   a cada valor da lista. A função de formatação pode ser observada em
   ref:code:formatPriceFunction.
   # Esse processo de transformação é chamado de projeção

   #+caption: Função pra formatar um preço
   #+label: code:formatPriceFunction
   #+BEGIN_SRC js
   function formatPrice(price) {
     return 'R$' + price.toFixed(2);
   }
   #+END_SRC

   Em ref:code:formatPricesFor pode-se ver a solução implementada com o laço
   src_js{for}.

   #+caption: Formatação de preços com laço src_js{for}
   #+label: code:formatPricesFor
   #+BEGIN_SRC js
   const prices = [50.45, 47, 20.99, 3.44, 1];
   let formatedPrices = [];

   for (let i = 0; i < prices.length; i++) {
     formatedPrices.push(formatPrice(prices[i]));
   }
   #+END_SRC

   Em ref:code:formatPricesMap pode-se ver a solução implementada com a função
   src_js{map}.

   #+caption: Formatação de preços com laço src_js{for}
   #+label: code:formatPricesMap
   #+BEGIN_SRC js
   const prices = [50.45, 47, 20.99, 3.44, 1];

   const formatedPrices = prices.map(formatPrice);
   #+END_SRC

   Outras ideias:

   - Adicionar $1$ a cada número de uma lista
   - Multiplicar os números de uma lista
   - Transformar palavras com letras minúsculas de uma lista em palavras com
     letras maiúsculas

** Seleção de valores com =filter()=
   Remover nomes que não começam com ‘S’

** Nivelamento de valores com =concatAll()=
** Redução de valores com ~reduce()~
** Agrupamento de valores com ~zip()~

* Coordenação de Eventos
** Contador

   A implementação do contador usando classes poder ser observado em
   ref:code:contadorComPOO.
   # Para o autocomplete do ref funcionar a label precisa ser declarada da
   # seguinte forma: 'label:códigoDoRótulo'

   #+caption: Contador com POO
   #+label: code:contadorComPOO
   #+begin_src js
   // No Java isto extenderia alguma classe padrão do toolkit,
   // como `Application`
   class Contador {
     constructor(props) {
       // Em Java estas propriedades precisam ser definidas antes
       this.contador = props.valorInicial;
       this.caixaDoValor = document.getElementById("valor");
       this.botãoDeIncrementar = document.getElementById("botãoDeIncrementar");
       this.botãoDeIncrementar.addEventListener(
         "click",
         // Isto requer uma explicação um tanto extensa
         this.tratarClique.bind(this)
       );
     }

     tratarClique(_evento) {
       this.contador = this.contador + 1;
       this.renderizar();
     }

     // Equivalente ao `public static void main()` do Java
     renderizar() {
       this.caixaDoValor.innerText = this.contador;
     }
   }

   const contador = new Contador({ valorInicial: 0 });
   // Como no Java o `main()` é padronizado, sua execução seria
   // feita automaticamente pelo ambiente de execução.
   contador.renderizar();
   #+end_src
   # https://codesandbox.io/s/contador-com-oop-callbacks-nst9y

   # Como fazer o ref se vincular com a linha no código? No LaTeX não está
   # funcionando: https://orgmode.org/manual/Literal-Examples.html
   O src_js{tratarClique.bind(this)} na linha 12 requer uma explicação um tanto
   extensa.

   O contador usando função e operadores do xstream pode ser observado em
   ref:code:contadorComPR.

   #+caption: Contador com PR
   #+label: code:contadorComPR
   #+begin_src js
   import fromEvent from "xstream/extra/fromEvent";

   const Contador = props => {
     const caixaDoValor = document.getElementById("valor");
     const botãoDeIncrementar = document.getElementById("botãoDeIncrementar");

     // Fluxo que emite um evento toda vez que o botão for clicado
     const clique$ = fromEvent(botãoDeIncrementar, "click");

     // Fluxo que emite "valor + 1" (acumulado) toda vez que
     // cliqueS emite um evento
     const contador$ = clique$.fold(
       (valor, _evento) => valor + 1,
       props.valorInicial
     );

     const observador = {
       next: valor => {
         caixaDoValor.innerText = valor;
       }
     };

     contador$.addListener(observador);
   };

   Contador({ valorInicial: 0 });
   #+end_src

   # O “$” quebra o LaTeX quando usado no comentário do código. A solução talvez
   # seja usar anotações/annotations: https://tex.stackexchange.com/a/86457/103967

** Reserva de voo


* Footnotes

[fn:prototypes] Diferente da maioria das linguagens, em que objetos são
instâncias de classes, no JavaScript os objetos são extensões de /protótipos/.

[fn:iteration] O processo de percorrer, um por um, os itens de uma coleção.

[fn:var_implicit_def] Isto é, quando não se precede uma definição de variável
com =var= ou =let= por exemplo.

[fn:fragile_base_class] Veja: https://en.wikipedia.org/wiki/Fragile_base_class.
